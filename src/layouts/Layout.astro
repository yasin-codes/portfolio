---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/icon2.svg" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
		<title>{title}</title>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
	</head>
    
	<body class="font-['Noto_Sans'] bg-zinc-50 scroll-smooth">
		<slot />		
		<script>
    document.addEventListener('DOMContentLoaded', function() {
    const darkModeToggle = document.getElementById('darkModeToggle');
    const sunIcon = document.getElementById('sun');
    const moonIcon = document.getElementById('moon');
    const body = document.body;

    // Check if user prefers dark mode
    const prefersDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

    // Function to toggle mode
    function toggleDarkMode() {
        if (body.classList.contains('dark')) {
            // Switch to light mode
            body.classList.remove('dark');
            body.style.backgroundColor = ''; // Reset to default (or remove this line to keep existing CSS background)
            sunIcon.classList.remove('hidden');
            moonIcon.classList.add('hidden');
        } else {
            // Switch to dark mode
            body.classList.add('dark');
            body.style.backgroundColor = '#09090B'; // Example dark mode background color using Tailwind's dark mode variant
            sunIcon.classList.add('hidden');
            moonIcon.classList.remove('hidden');
        }
    }

    // Initial check based on user preference
    if (prefersDarkMode) {
        body.classList.add('dark');
        body.style.backgroundColor = '#09090B'; // Example dark mode background color using Tailwind's dark mode variant
        sunIcon.classList.add('hidden');
        moonIcon.classList.remove('hidden');
    }

    // Event listener for the toggle button
    darkModeToggle.addEventListener('click', toggleDarkMode);
});

document.addEventListener('DOMContentLoaded', function() {
    const ModeToggle = document.getElementById('ModeToggle');
    const terang = document.getElementById('terang');
    const gelap = document.getElementById('gelap');
    const bg = document.body;

    // Check if user prefers dark mode
    const prefersDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

    // Function to toggle mode
    function toggleDarkMode() {
        if (bg.classList.contains('dark')) {
            // Switch to light mode
            bg.classList.remove('dark');
            bg.style.backgroundColor = ''; // Reset to default (or remove this line to keep existing CSS background)
            terang.classList.remove('hidden');
            gelap.classList.add('hidden');
        } else {
            // Switch to dark mode
            bg.classList.add('dark');
            bg.style.backgroundColor = '#09090B'; // Example dark mode background color using Tailwind's dark mode variant
            terang.classList.add('hidden');
            gelap.classList.remove('hidden');
        }
    }

    // Initial check based on user preference
    if (prefersDarkMode) {
        bg.classList.add('dark');
        bg.style.backgroundColor = '#09090B'; // Example dark mode background color using Tailwind's dark mode variant
        terang.classList.add('hidden');
        gelap.classList.remove('hidden');
    }

    // Event listener for the toggle button
    ModeToggle.addEventListener('click', toggleDarkMode);
});

		</script>
        
	</body>
</html>
